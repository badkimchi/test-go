// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO Accounts (Name, Level, Email)
VALUES ($1, $2, $3) RETURNING account_id, name, level, email
`

type CreateAccountParams struct {
	Name  string `json:"name"`
	Level int32  `json:"level"`
	Email string `json:"email"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Name, arg.Level, arg.Email)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Name,
		&i.Level,
		&i.Email,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE
FROM Accounts
WHERE Account_ID = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, name, level, email
FROM Accounts
WHERE Account_ID = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountID int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Name,
		&i.Level,
		&i.Email,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT account_id, name, level, email
FROM Accounts
WHERE Email = $1 LIMIT 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Name,
		&i.Level,
		&i.Email,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE Accounts
SET Name     = $2,
    Level    = $3,
    Email    = $4
WHERE Account_ID = $1
`

type UpdateAccountParams struct {
	AccountID int64  `json:"account_id"`
	Name      string `json:"name"`
	Level     int32  `json:"level"`
	Email     string `json:"email"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount,
		arg.AccountID,
		arg.Name,
		arg.Level,
		arg.Email,
	)
	return err
}
